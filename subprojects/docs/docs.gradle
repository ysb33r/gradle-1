
/*
 * Copyright 2010 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import org.apache.tools.ant.filters.ReplaceTokens
import org.asciidoctor.gradle.jvm.AsciidoctorTask
import org.asciidoctor.gradle.jvm.AsciidoctorPdfTask
import org.asciidoctor.gradle.jvm.AbstractAsciidoctorTask
import org.gradle.build.docs.Docbook2Xhtml
import org.gradle.build.docs.UserGuideTransformTask
import org.gradle.build.docs.dsl.docbook.AssembleDslDocTask
import org.gradle.build.docs.dsl.source.ExtractDslMetaDataTask
import org.gradle.build.docs.dsl.source.GenerateDefaultImportsTask
import org.gradle.build.docs.releasenotes.*
import org.gradle.build.docs.releasenotes.checks.*
import org.gradle.gradlebuild.BuildEnvironment
import org.gradle.gradlebuild.ProjectGroups
import org.gradle.gradlebuild.PublicApi
import org.gradle.gradlebuild.docs.PegDown
import org.gradle.gradlebuild.unittestandcompile.ModuleType

buildscript {
	repositories { mavenLocal() }
	dependencies { classpath 'org.ysb33r.gradle:grolifant:0.9-SNAPSHOT' }
}


plugins {
    id 'base'
    id 'gradlebuild.jsoup'
    id 'javascript-base'
    id 'org.asciidoctor.jvm.convert'
}

repositories {
    javaScript.googleApis()
}

configurations {
    userGuideStyleSheets
    userGuideTask
    jquery
    jqueryTipTip
    asciidoctorExtensions

    cssElements {
        // define an outgoing configuration, aimed at consumers looking
        // for CSS resources
        attributes {
            attribute(Usage.USAGE_ATTRIBUTE, project.objects.named(Usage, 'css-resources'))
        }
        canBeResolved = false
        canBeConsumed = true
    }
}

dependencies {
    asciidoctorExtensions "org.gradle:docs-asciidoctor-extensions:0.3.0"
    asciidoctorExtensions project.files("src/main/resources")

    userGuideTask 'xalan:xalan:2.7.1', 'xerces:xercesImpl:2.11.0'
    userGuideTask 'xhtmlrenderer:xhtmlrenderer:R8rc1'
    userGuideTask 'itext:itext:2.0.8'
    userGuideTask 'xslthl:xslthl:2.0.1'

    userGuideStyleSheets 'docbook:docbook-xsl:1.75.2@zip'
    jquery "jquery:jquery.min:1.8.0@js"
    jqueryTipTip "com.drewwilson.code:jquery.tipTip:1.3:minified@js"

    testCompile "org.pegdown:pegdown:1.1.0"
    testCompile testLibraries.jsoup
    testCompile "org.gebish:geb-spock:0.9.3"
    testCompile('org.seleniumhq.selenium:selenium-htmlunit-driver:2.42.2')
    testCompile libraries.commons_httpclient.coordinates
    testCompile "org.apache.httpcomponents:httpmime:${libraries.commons_httpclient.version}"
    testCompile project(":core")
}

gradlebuildJava {
    moduleType = ModuleType.PLUGIN
}

ext {
    srcDocsDir = file('src/docs')
    releaseFeaturesFile = file("$srcDocsDir/release/release-features.txt")
    userguideSrcDir = new File(srcDocsDir, 'userguide')
    userguideIntermediateOutputDir = new File(buildDir, 'userguideIntermediate')
    userguideSinglePageOutputDir = new File(buildDir, 'userguideSinglePage')
    userguidePdfOutputDir = new File(buildDir, 'userguidePdf')
    dslSrcDir = new File(srcDocsDir, 'dsl')
    docsDir = file("$buildDir/docs")
    userguideDir = new File(docsDir, 'userguide')
    distDocsDir = new File(buildDir, 'distDocs')
    samplesDir = file("$buildDir/samples")
    docbookSrc = new File(project.buildDir, 'src')
    samplesSrcDir = file('src/samples')
}

ext.outputs = [:]
outputs.samples = files(samplesDir) {
    builtBy 'samples'
}
outputs.distDocs = files(distDocsDir) {
    builtBy 'distDocs'
}
outputs.docs = files(docsDir) {
    builtBy 'javadocAll', 'userguide', 'dslHtml', 'releaseNotes'
}

def configureCss = tasks.register("configureCss") {
    doLast {
        def tokens = fileTree(dir: "src/docs/css/images", include: "*.*").collectEntries {
            [it.name, it.bytes.encodeBase64().toString()]
        }

        css.inputs.property 'tokens', tokens
        css.filter ReplaceTokens, tokens: tokens
    }
}

def css = tasks.register("css", Sync) {
    dependsOn configureCss
    into "$buildDir/css"
    from "src/docs/css"
    include "*.css"
    include "*.svg"
}

artifacts {
    // declare that the generated css directory is an output of cssElements
    cssElements file: css.get().destinationDir, builtBy: css
}

// TODO This is a hack pending a solution to https://github.com/gradle/gradle/issues/4612
// Don't publish the CSS artifacts when calling uploadArchives
configurations.archives.artifacts.removeAll(configurations.cssElements.artifacts)

ext.cssFiles = fileTree(css.map { it.destinationDir }) {
    builtBy css
}

def imageFiles = fileTree(userguideSrcDir) {
    include 'img/*.png'
    include 'img/*.gif'
    include 'img/*.jpg'
}
def resourceFiles = imageFiles + cssFiles

def samples = tasks.register("samples", Copy) {
    from samplesSrcDir
    into samplesDir

    exclude '**/readme.xml'
    exclude '**/build/**'
    exclude '**/.gradle/**'
}

tasks.register("userguideStyleSheets", Copy) {
    File stylesheetsDir = new File(srcDocsDir, 'stylesheets')
    into new File(buildDir, 'stylesheets')
    from(stylesheetsDir) {
        include '**/*.xml'
        include '*.xsl'
    }
    from(cssFiles)
    from({ zipTree(configurations.userGuideStyleSheets.singleFile) }) {
        // Remove the prefix
        eachFile { fcd -> fcd.path = fcd.path.replaceFirst('^docbook-xsl-[0-9\\.]+/', '') }
    }
}

def generatedResourcesDir = gradlebuildJava.generatedResourcesDir

def dslMetaData = tasks.register("dslMetaData", ExtractDslMetaDataTask) {
    source { javadocAll.source }
    destFile = new File(docbookSrc, 'dsl-meta-data.bin')
}

def dslDocbook = tasks.register("dslDocbook", AssembleDslDocTask) {
    dependsOn dslMetaData
    sources = fileTree(dir: dslSrcDir, includes: ['*.xml'])
    sourceFile = new File(dslSrcDir, 'dsl.xml')
    classDocbookDir = dslSrcDir
    classMetaDataFile = dslMetaData.get().destFile
    pluginsMetaDataFile = new File(dslSrcDir, 'plugins.xml')
    destFile = new File(docbookSrc, 'dsl.xml')
    linksFile = new File(docbookSrc, 'api-links.bin')
}

def defaultImports = tasks.register("defaultImports", GenerateDefaultImportsTask) {
    dependsOn dslMetaData
    metaDataFile = dslMetaData.get().destFile
    importsDestFile = new File(generatedResourcesDir, "default-imports.txt")
    mappingDestFile = new File(generatedResourcesDir, "api-mapping.txt")
    // These are part of the API, but not the DSL
    excludePackage 'org.gradle.tooling.**'
    excludePackage 'org.gradle.testfixtures.**'

    // Tweak the imports due to some inconsistencies introduced before we automated the default-imports generation
    excludePackage 'org.gradle.plugins.ide.eclipse.model'
    excludePackage 'org.gradle.plugins.ide.idea.model'
    excludePackage 'org.gradle.api.tasks.testing.logging'

    // TODO - rename some incubating types to remove collisions and then remove these exclusions
    excludePackage 'org.gradle.plugins.binaries.model'

    // Exclude classes that were moved in a different package but the deprecated ones are not removed yet
    excludePackage 'org.gradle.platform.base.test'
}

def dslStandaloneDocbook = tasks.register("dslStandaloneDocbook", UserGuideTransformTask) {
    dependsOn dslDocbook
    sourceFile = dslDocbook.get().destFile
    destFile = new File(docbookSrc, 'dsl-standalone.xml')
    dsldocUrl = '.'
    linksFile = new File(docbookSrc, 'api-links.bin')
    javadocUrl = '../javadoc'
    dsldocUrl = '../dsl'
    websiteUrl = 'https://gradle.org'
}

def dslHtml = tasks.register("dslHtml", Docbook2Xhtml) {
    group = "Documentation"
    dependsOn userguideStyleSheets
    source dslStandaloneDocbook
    destDir = new File(docsDir, 'dsl')
    classpath = configurations.userGuideTask
    stylesheetsDir = userguideStyleSheets.destinationDir
    stylesheetName = 'dslHtml.xsl'
    resources = cssFiles + fileTree(dslSrcDir) {
        include '*.js'
    }
    ext.entryPoint = "$destDir/index.html"
}

def userguideSinglePage = tasks.register("userguideSinglePage", AsciidoctorTask) {
    sourceDir = userguideSrcDir
    sources { include 'userguide_single.adoc' }
    outputDir = userguideSinglePageOutputDir

    attributes \
        toc                 : 'macro',
        toclevels           : 2,
        'source-highlighter': 'coderay'
}

def userguidePdf = tasks.register("userguidePdf", AsciidoctorPdfTask) {
    sourceDir = userguideSrcDir
    sources { include 'userguide_single.adoc' }
    outputDir = userguidePdfOutputDir

    attributes \
        toc                 : 'macro',
        toclevels           : 2,
        'source-highlighter': 'coderay'
}

def javaApiUrl = "https://docs.oracle.com/javase/7/docs/api"
def groovyApiUrl = "http://docs.groovy-lang.org/docs/groovy-${libraries.groovy.version}/html/gapi"
def mavenApiUrl = "http://maven.apache.org/ref/${libraries.maven3.version}/maven-model/apidocs"

def javadocAll = tasks.register("javadocAll", Javadoc) {
    ext.stylesheetFile = file("src/docs/css/javadoc.css")
    inputs.file stylesheetFile withPropertyName "stylesheetFile" withPathSensitivity PathSensitivity.NAME_ONLY

    group = 'documentation'
    options.encoding = 'utf-8'
    options.docEncoding = 'utf-8'
    options.charSet = 'utf-8'
    if (BuildEnvironment.javaVersion.isJava8Compatible()) {
        options.addStringOption 'Xdoclint:syntax,html,reference', '-quiet'
    }
    options.addStringOption "stylesheetfile", stylesheetFile.absolutePath
    source ProjectGroups.INSTANCE.getPublicJavaProjects(project).collect { project -> project.sourceSets.main.allJava }
    destinationDir = new File(docsDir, 'javadoc')
    classpath = files(ProjectGroups.INSTANCE.getPublicJavaProjects(project).collect {project -> [project.sourceSets.main.compileClasspath, project.sourceSets.main.output] })
    PublicApi.includes.each {
        include it
    }
    PublicApi.excludes.each {
        exclude it
    }
    options.links(javaApiUrl, groovyApiUrl, mavenApiUrl)
    title = "Gradle API $version"
    ext.entryPoint = "$destinationDir/index.html"
}

tasks.register("checkstyleApi", Checkstyle) {
    source javadocAll.get().source
    configFile = new File(checkstyle.configDir, "checkstyle-api.xml")
    classpath = files()
    reports.xml.destination = file("$checkstyle.reportsDir/checkstyle-api.xml")
}

def distDocs = tasks.register("distDocs", AsciidoctorTask) {
    sourceDir = userguideSrcDir
    outputDir = distDocsDir
    sources { include 'getting-started.adoc' }
    //backends = ['html5']
}

asciidoctorj {
//    noDefaultRepositories = true
//    version = '1.5.7'
}

tasks.withType(AsciidoctorTask).configureEach {
    dependsOn css, samples, defaultImports

    configurations 'asciidoctorExtensions'

    //separateOutputDirs = false
    options doctype: 'book'

    inputs.file "$srcDocsDir/css/manual.css"
    inputs.dir file("src/main/resources")
    inputs.dir samplesSrcDir

    attributes \
        stylesdir           : '../css/',
        stylesheet          : 'manual.css',
        imagesdir           : 'img',
        nofooter            : true,
        sectanchors         : true,
        sectlinks           : true,
        linkattrs           : true,
        reproducible        : '',
        lang                : 'en-US',
        encoding            : 'utf-8',
        idprefix            : '',
        website             : 'https://gradle.org',
        javaApi             : 'https://docs.oracle.com/javase/7/docs/api',
        antManual           : 'https://ant.apache.org/manual',
        docsUrl             : 'https://docs.gradle.org',
        guidesUrl           : 'https://guides.gradle.org',
        gradleVersion       : version,
        groovyDslPath       : "../dsl",
        javadocPath         : "../javadoc",
        samplesPath         : "../../samples"
}

def userguideMultiPage = tasks.register("userguideMultiPage", AsciidoctorTask) {
    sourceDir = userguideSrcDir

    sources {
        include '*.adoc'
        exclude 'javaProject*Layout.adoc'
        exclude 'userguide_single.adoc'
    }
    outputDir = userguideIntermediateOutputDir

//    backends = ['html5']

    attributes \
        icons               : null,
        'note-caption'      : '&#10024;',
        'tip-caption'       : '&#128161;',
        'important-caption' : '&#10071;️',
        'caution-caption'   : '&#9888;',
        'warning-caption'   : '&#9888;',
        'source-highlighter': 'prettify',
        toc                 : 'auto',
        toclevels           : 1,
        'toc-title'         : 'Contents'
}

// Avoid overlapping outputs by copying exactly what we want from other intermediate tasks
def userguide = tasks.register("userguide", Copy) {
    dependsOn userguideMultiPage, userguideSinglePage, userguidePdf
    description = 'Generates the userguide HTML and PDF'
    group = 'documentation'

    from resourceFiles
    from userguideIntermediateOutputDir
    from userguideSinglePageOutputDir
    from userguidePdfOutputDir

    into userguideDir
    rename 'userguide_single.pdf', 'userguide.pdf'
}

tasks.register("serveDocs", Exec) {
    description = 'Runs webserver to serve generate userguide docs'
    group = 'documentation'

    def webserverPort = 8000
    workingDir docsDir
    executable "python"
    args "-m", "SimpleHTTPServer", webserverPort

    dependsOn userguide

    doFirst {
        logger.lifecycle("ctrl+C to restart, serving Gradle docs at http://localhost:${webserverPort}")
    }
}

tasks.register("editReleaseNotes") {
    group = "release notes"
    doLast {
        Class.forName("java.awt.Desktop").newInstance().edit(file("src/docs/release/notes.md"))
    }
}

def releaseNotesMarkdown = tasks.register("releaseNotesMarkdown", PegDown, file("src/docs/release/notes.md"), new File(buildDir, "release-notes-raw/release-notes.html"))
releaseNotesMarkdown.configure {
    group = "release notes"
}

def releaseNotes = tasks.register("releaseNotes", Copy) {
    group = "release notes"
    ext.fileName = "release-notes.html"
    into "$docsDir"
    from releaseNotesMarkdown
    jsoup.plugins "src/transforms/release-notes.gradle"
    filter(ReplaceTokens, tokens: [version: project.version.toString(), baseVersion: rootProject.baseVersion])
    ext.entryPoint = file("$docsDir/$fileName")
}

tasks.addRule("view«Doc Task Name» - Opens entry point") { String taskName ->
    if (taskName.startsWith("view")) {
        def realTaskName = (taskName - "view")
        realTaskName = realTaskName[0].toLowerCase() + realTaskName[1..-1]
        def task = tasks.findByName(realTaskName)
        if (task && task.hasProperty("entryPoint")) {
            tasks.create(taskName) {
                dependsOn task
                doLast {
                    Class.forName("java.awt.Desktop").newInstance().browse(file(task.entryPoint).toURI())
                }
            }
        }
    }
}

def copyReleaseFeatures = tasks.register("copyReleaseFeatures", Copy) {
    from releaseFeaturesFile
    into generatedResourcesDir
}

sourceSets.main.output.dir generatedResourcesDir, builtBy: [defaultImports, copyReleaseFeatures]

tasks.named("test").configure {
    dependsOn releaseNotes
    inputs.files releaseNotesMarkdown.get().markdownFile withPropertyName "releaseNotesSource" withPathSensitivity PathSensitivity.NONE
    inputs.dir releaseNotes.get().destinationDir withPropertyName "releaseNotesRendered" withPathSensitivity PathSensitivity.NONE
    inputs.property "systemProperties", [:]
    systemProperty "org.gradle.docs.releasenotes.source", releaseNotesMarkdown.get().markdownFile
    systemProperty "org.gradle.docs.releasenotes.rendered", new File(releaseNotes.get().destinationDir, releaseNotes.get().fileName)
    systemProperty "org.gradle.docs.releasefeatures", releaseFeaturesFile
}

tasks.register("docs") {
    dependsOn javadocAll, userguide, distDocs, dslHtml, releaseNotes
    description = 'Generates all documentation'
    group = 'documentation'
}

tasks.register("docsZip", Zip) {
    from project.outputs.docs
}
